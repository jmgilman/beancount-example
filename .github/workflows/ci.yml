on:
  push:
    branches:
      - master
    tags:
      - '*'
    paths-ignore:
      - '.vscode/**'
      - '**.md'
      - '.gitignore'
  pull_request:
    paths-ignore:
      - '.vscode/**'
      - '**.md'
      - '.gitignore'
  workflow_dispatch:

name: CI

env:
  COSIGN_VERSION: "v1.4.0"
  POETRY_VERSION: "1.1.12"
  PYTHON_VERSION: "3.10"
  IMAGE_NAME: ${{ github.repository }}

jobs:
  static:
    name: Run static analysis tools
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/workflows/composite/setup-python
        with:
          python_version: ${{ env.PYTHON_VERSION }}
          python_version: ${{ env.POETRY_VERSION }}
      - name: Run linters
        run: nox -rs lint
      - name: Run formatters
        run: nox -rs format
  test:
    name: Run test suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/workflows/composite/setup-python
        with:
          python_version: ${{ env.PYTHON_VERSION }}
          python_version: ${{ env.POETRY_VERSION }}
      - name: Run tests
        run: nox -rs test
      - name: Run coverage
        run: nox -rs coverage
      - name: Upload coverage report to CodeCov
        uses: codecov/codecov-action@v2
        with:
          files: ./coverage.xml
  push:
    name: Push Docker image
    runs-on: ubuntu-latest
    needs: [static, test]
    steps:
      - name: Set up cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@1e95c1de343b5b0c23352d6417ee3e48d5bcd422
        with:
          cosign-release: ${{ env.COSIGN_VERSION }}
      - name: Set up QEMU for multi-arch builds
        uses: docker/setup-qemu-action@master
        with:
          platforms: all
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@master
      - name: Login to Github Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v3
        with:
          images: |
            ghcr.io/${{ env.IMAGE_NAME }}
            ${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha
      - name: Generate cache references
        uses: int128/docker-build-cache-config-action@v1
        id: cache
        with:
          image: ghcr.io/${{ github.repository }}/cache
      - name: Build and push
        id: build-and-push
        uses: docker/build-push-action@v2
        with:
          builder: ${{ steps.buildx.outputs.name }}
          platforms: linux/amd64,linux/arm64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: ${{ steps.cache.outputs.cache-from }}
          cache-to: ${{ steps.cache.outputs.cache-to }}
          push: true
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ghcr.io/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
          format: 'sarif'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          output: 'trivy-results.sarif'
      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Sign the published DockerHub image
        if: startsWith(github.event.ref, 'refs/tags/v')
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: cosign sign ${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
      - name: Sign the published Github Container Registry image
        if: startsWith(github.event.ref, 'refs/tags/v')
        env:
          COSIGN_EXPERIMENTAL: "true"
        run: cosign sign ghcr.io/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}